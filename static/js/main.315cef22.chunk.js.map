{"version":3,"sources":["components/general/popup.tsx","components/general/errorHandler.tsx","context/errorContext.ts","context/listingContext.ts","components/listingTable.tsx","api/mlspin.ts","api/osmNominatim.ts","utility/delayQueue.ts","components/sourceInputPopup.tsx","components/listingPopup.tsx","components/map.tsx","components/main.tsx","styles/theme.ts","App.tsx","index.tsx"],"names":["useStyles","makeStyles","buttonsContainer","padding","display","flexDirection","justifyContent","Popup","title","isOpen","confirmButtonLabel","disableConfirmButton","hideCancelButton","children","onConfirm","onCancel","onExited","classes","Dialog","open","maxWidth","DialogTitle","DialogContent","DialogActions","className","Button","onClick","variant","disabled","ErrorHandler","props","state","error","this","setState","errors","undefined","length","resetErrors","map","e","i","Typography","React","ErrorContext","createContext","addError","clearAll","ListingContext","isImporting","selectedListingId","listings","coordinates","currencyFormatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","columns","field","headerName","flex","valueGetter","params","row","address","street","disableColumnMenu","unit","type","city","valueFormatter","format","value","valueOf","ListingTable","setSelectedListingId","listingContext","useContext","rows","autoHeight","disableMultipleSelection","pagination","pageSize","rowsPerPageOptions","onRowSelected","data","id","selectionModel","NaN","scrapeSourceForListings","listingPage","a","parser","DOMParser","doc","parseFromString","listingRows","querySelectorAll","forEach","listing","listingId","parseInt","getAttribute","bedBaths","parseBedAndBathCounts","item","textContent","addressFull","parsedAddress","parseAddress","push","price","parsePrice","bedCount","bathCount","Promise","resolve","success","toString","content","matches","exec","groups","replace","addressLine","match","Error","trim","unitOffset","indexOf","slice","err","priceString","priceMatch","geocodeQueue","delay","_delay","_queue","_isTicking","promise","reject","startTick","force","setTimeout","pop","bind","nextItem","shift","console","log","lookupGeocodeAddress","addressQuery","cacheEntry","localStorage","getItem","toLocaleUpperCase","JSON","parse","randomOffset","Math","random","PI","latitude","sin","longitude","cos","waitNext","query","q","limit","addressdetails","countrycodes","fetch","querystring","encode","response","ok","status","json","coordinate","parseFloat","lat","lon","coordinateJson","stringify","setItem","sourceInput","width","SourceInputPopup","setIsImporting","setListings","setCoordinates","close","useState","sourceString","setSourceString","errorContext","parseAndSaveListings","parseResult","newListings","ids","Set","l","filter","has","add","coordinatesResult","TextField","multiline","fullWidth","rowsMax","placeholder","onChange","s","currentTarget","listingView","height","ListingPopup","find","src","margin","listingType","textTransform","Map","showListing","Grid","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","reduce","markers","Marker","position","eventHandlers","click","_","container","direction","alignItems","component","color","newTab","window","opener","openListing","mainContainer","buttonContainer","Main","isListingVisible","setIsListingVisible","setErrors","isSourceInputOpen","setIsSourceInputOpen","Provider","justify","DefaultTheme","createMuiTheme","palette","shape","borderRadius","overrides","MuiCssBaseline","body","fontFamily","join","html","App","ThemeProvider","theme","CssBaseline","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.315cef22.chunk.js","sourcesContent":["import React, { FC, ReactNode } from 'react';\r\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button, makeStyles } from '@material-ui/core';\r\n\r\ninterface PopupProps {\r\n    title: string;\r\n    isOpen: boolean;\r\n    confirmButtonLabel: string;\r\n    disableConfirmButton?: boolean;\r\n    hideCancelButton?: boolean;\r\n    children?: ReactNode;\r\n    onConfirm: () => void;\r\n    onCancel?: () => void;\r\n    onExited?: () => void;\r\n}\r\n\r\nexport const useStyles = makeStyles(() => ({\r\n    buttonsContainer: {\r\n        padding: '1.5rem',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n    },\r\n}));\r\n\r\nexport const Popup: FC<PopupProps> = ({\r\n    title,\r\n    isOpen,\r\n    confirmButtonLabel,\r\n    disableConfirmButton,\r\n    hideCancelButton,\r\n    children,\r\n    onConfirm,\r\n    onCancel,\r\n    onExited,\r\n}: PopupProps) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Dialog open={isOpen} maxWidth={false} onExited={onExited}>\r\n            <DialogTitle>{title}</DialogTitle>\r\n            <DialogContent>{children}</DialogContent>\r\n            <DialogActions className={classes.buttonsContainer}>\r\n                {!hideCancelButton && (\r\n                    <Button onClick={onCancel} variant=\"outlined\">\r\n                        Cancel\r\n                    </Button>\r\n                )}\r\n                <Button onClick={onConfirm} variant=\"contained\" disabled={disableConfirmButton}>\r\n                    {confirmButtonLabel}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n","import { Typography } from '@material-ui/core';\r\nimport * as React from 'react';\r\nimport { Popup } from './popup';\r\n\r\ninterface ErrorHandlerProps {\r\n    children?: React.ReactNode;\r\n}\r\n\r\ninterface ErrorHandlerState {\r\n    errors?: Error[];\r\n}\r\n\r\n// This component is an application-wide error boundary that can catch\r\n// errors thrown in lower components, log them, and display them to the\r\n// user via a popup dialog\r\nexport class ErrorHandler extends React.Component<ErrorHandlerProps, ErrorHandlerState> {\r\n    constructor(props: ErrorHandlerProps, state: ErrorHandlerState) {\r\n        super(props, state);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidCatch(error: Error) {\r\n        this.setState({ errors: [...(this.state.errors || []), error] });\r\n    }\r\n\r\n    private resetErrors() {\r\n        this.setState({ errors: undefined });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Popup\r\n                    title=\"Error\"\r\n                    isOpen={this.state !== null && this.state.errors !== undefined && this.state.errors.length > 0}\r\n                    confirmButtonLabel=\"Ok\"\r\n                    hideCancelButton\r\n                    onConfirm={this.resetErrors}\r\n                    onExited={this.resetErrors}\r\n                >\r\n                    {this.state.errors?.map((e, i) => (\r\n                        <Typography key={i}>{e}</Typography>\r\n                    ))}\r\n                </Popup>\r\n                {this.props.children}\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface ErrorContextType {\r\n    errors: string[] | null;\r\n    addError: (error: string) => void;\r\n    clearAll: () => void;\r\n}\r\n\r\nexport const ErrorContext = React.createContext<ErrorContextType>({\r\n    errors: null,\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    addError: (error: string) => {},\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    clearAll: () => {},\r\n});\r\n","import React from 'react';\r\nimport { Listing } from '../schemas/listing';\r\nimport { ListingCoordinates } from '../schemas/listingCoordinates';\r\n\r\ninterface ListingContextType {\r\n    isImporting: boolean;\r\n    selectedListingId: number | null;\r\n    listings: Listing[] | null;\r\n    coordinates: ListingCoordinates[] | null;\r\n}\r\n\r\nexport const ListingContext = React.createContext<ListingContextType>({\r\n    isImporting: false,\r\n    selectedListingId: null,\r\n    listings: null,\r\n    coordinates: null,\r\n});\r\n","import React, { FC } from 'react';\r\nimport { ListingContext } from '../context/listingContext';\r\nimport { DataGrid, GridColDef } from '@material-ui/data-grid';\r\n// import { ErrorContext } from '../context/errorContext';\r\n\r\ninterface ListingTableProps {\r\n    setSelectedListingId: (listingId: number | null) => void;\r\n}\r\n\r\nconst currencyFormatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n});\r\n\r\nconst columns: GridColDef[] = [\r\n    {\r\n        field: 'address',\r\n        headerName: 'Address',\r\n        flex: 2,\r\n        valueGetter: (params) => params.row.address.street,\r\n        disableColumnMenu: true,\r\n    },\r\n    {\r\n        field: 'unit',\r\n        headerName: 'Unit',\r\n        flex: 0.5,\r\n        valueGetter: (params) => params.row.address.unit,\r\n        disableColumnMenu: true,\r\n    },\r\n    { field: 'type', headerName: 'Type', type: 'string', flex: 0.5 },\r\n    { field: 'city', headerName: 'City', flex: 1, valueGetter: (params) => params.row.address.city },\r\n    {\r\n        field: 'price',\r\n        headerName: 'Price',\r\n        flex: 1,\r\n        type: 'number',\r\n        valueFormatter: (params) => currencyFormatter.format((params.value?.valueOf() as number) ?? 0),\r\n    },\r\n    { field: 'bedCount', headerName: 'Beds', type: 'number', flex: 0.5 },\r\n    { field: 'bathCount', headerName: 'Baths', type: 'number', flex: 0.5 },\r\n];\r\n\r\nexport const ListingTable: FC<ListingTableProps> = ({ setSelectedListingId }: ListingTableProps) => {\r\n    const listingContext = React.useContext(ListingContext);\r\n    // const errorContext = React.useContext(ErrorContext);\r\n\r\n    if (!listingContext.listings?.length) {\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <DataGrid\r\n            rows={listingContext.listings}\r\n            columns={columns}\r\n            autoHeight\r\n            disableMultipleSelection\r\n            pagination\r\n            pageSize={10}\r\n            rowsPerPageOptions={[10, 25, 100]}\r\n            onRowSelected={(row) => setSelectedListingId(row.data.id)}\r\n            selectionModel={[listingContext.selectedListingId ?? NaN]}\r\n        />\r\n    );\r\n};\r\n","import { Address } from '../schemas/address';\r\nimport { Listing } from '../schemas/listing';\r\nimport { DataResult } from '../schemas/result';\r\n\r\nexport const openListing = (listingId: number): void => {\r\n    const newTab = window.open(\r\n        `https://vow.mlspin.com/VOW/listingviews/GetListing?rm=1&vf=2&summ=false&o=2&od=1&f=0&ps=0&offs=0&sel=${listingId}&sp=false&cb=16190256`,\r\n        '_blank',\r\n        'noopener,noreferrer'\r\n    );\r\n    if (newTab) {\r\n        newTab.opener = null;\r\n    }\r\n};\r\n\r\nexport const scrapeSourceForListings = async (listingPage: string): Promise<DataResult<Listing[]>> => {\r\n    const parser = new DOMParser();\r\n    try {\r\n        const doc = parser.parseFromString(listingPage, 'text/html');\r\n\r\n        const listingRows = doc.querySelectorAll('tr[data-ListNo]');\r\n\r\n        const listings: Listing[] = [];\r\n        listingRows.forEach(async (listing) => {\r\n            const listingId = parseInt(listing.getAttribute('data-ListNo') ?? '0');\r\n            const bedBaths = parseBedAndBathCounts(listing.children.item(11)?.textContent ?? '');\r\n            const addressFull = listing.children?.item(9)?.textContent ?? '';\r\n            const parsedAddress = parseAddress(addressFull);\r\n\r\n            listings.push({\r\n                id: listingId,\r\n                address: parsedAddress,\r\n                type: bedBaths.type,\r\n                price: parsePrice(listing.children.item(13)?.textContent ?? '0'),\r\n                bedCount: bedBaths.bedCount,\r\n                bathCount: bedBaths.bathCount,\r\n            } as Listing);\r\n        });\r\n\r\n        return Promise.resolve({ success: true, data: listings });\r\n    } catch (err) {\r\n        return { success: false, error: err.toString() };\r\n    }\r\n};\r\n\r\nconst parseBedAndBathCounts = (content: string): { type: string; bedCount: number; bathCount: number } => {\r\n    const matches = /(?<bed>\\d)\\sbed,\\s(?<bathfull>\\d)f\\s(?<bathhalf>\\d)h\\sbath\\s(?<type>.*)/.exec(content);\r\n    const type = matches?.groups!['type']?.replace(/\\sx[\\d]+.*/, '');\r\n\r\n    return {\r\n        type: type ?? 'Unknown',\r\n        bedCount: parseInt(matches?.groups!['bed'] ?? '0'),\r\n        bathCount: parseInt(matches?.groups!['bathfull'] ?? '0') + 0.5 * parseInt(matches?.groups!['bathhalf'] ?? '0'),\r\n    };\r\n};\r\n\r\nconst parseAddress = (address: string): Address => {\r\n    // Addresses come to us in the format of '[number or range] [street] [U: unit#] [city], [state][optional :neighborhood]]'\r\n    try {\r\n        const addressLine = address.match(/.*MA.*/);\r\n        if (!addressLine?.length || addressLine.length !== 1) {\r\n            throw new Error('MA not found');\r\n        }\r\n\r\n        const matches = /(?<street>.*)\\s(?<city>[A-Za-z]+(?:\\s[A-Za-z]+)*), MA/.exec(addressLine[0]);\r\n        if (!matches?.groups) {\r\n            throw new Error('Could not split street/city');\r\n        }\r\n\r\n        // First remove the worthless unit number\r\n        let street = matches.groups['street'].trim();\r\n        const unitOffset = street.indexOf('U:');\r\n        const unit = unitOffset >= 0 ? street.slice(unitOffset + 2, street.length).trim() : null;\r\n        street = unitOffset >= 0 ? street.slice(0, unitOffset - 1) : street;\r\n        //const unitMatch = /(?:U:[\\s]*(?<unit>[\\w\\d]+))/.exec(matches.groups['street']);\r\n        //const street = matches.groups['street'].replace(/(?:U:[\\s]*[\\w\\d]+)/, '').trim();\r\n\r\n        return {\r\n            street: street,\r\n            unit: unit,\r\n            city: matches.groups['city'],\r\n            state: 'MA',\r\n        };\r\n    } catch (err) {\r\n        return {\r\n            street: err.toString(),\r\n            city: 'nowhere',\r\n            state: 'MA',\r\n        } as Address;\r\n    }\r\n};\r\n\r\nconst parsePrice = (priceString: string): number => {\r\n    try {\r\n        const priceMatch = priceString.match(/(?:\\$)([\\d,]+)/);\r\n        if (!priceMatch?.length || priceMatch.length !== 2) {\r\n            throw new Error(`Invalid price format: ${priceString}`);\r\n        }\r\n\r\n        return parseInt(priceMatch[1].replace(',', ''));\r\n    } catch (err) {\r\n        return 0;\r\n    }\r\n};\r\n","import { DataResult } from '../schemas/result';\r\nimport querystring from 'querystring';\r\nimport { NominatimResult } from '../schemas/nominatimResult';\r\nimport { ListingCoordinates } from '../schemas/listingCoordinates';\r\nimport { DelayQueue } from '../utility/delayQueue';\r\n\r\nconst geocodeQueue = new DelayQueue(1500);\r\n\r\nexport const lookupGeocodeAddress = async (\r\n    listingId: number,\r\n    addressQuery: string\r\n): Promise<DataResult<ListingCoordinates>> => {\r\n    try {\r\n        let cacheEntry = localStorage.getItem(listingId.toString());\r\n        if (!cacheEntry) {\r\n            cacheEntry = localStorage.getItem(addressQuery.toLocaleUpperCase());\r\n        }\r\n        if (cacheEntry) {\r\n            const coordinates = JSON.parse(cacheEntry);\r\n            if (coordinates.id !== listingId) {\r\n                coordinates.id = listingId;\r\n                const randomOffset = Math.random() * 2 * Math.PI;\r\n                coordinates.latitude = coordinates.latitude + Math.sin(randomOffset) * 0.00005;\r\n                coordinates.longitude = coordinates.longitude + Math.cos(randomOffset) * 0.00005;\r\n            }\r\n            return { success: true, data: coordinates };\r\n        }\r\n\r\n        await geocodeQueue.waitNext();\r\n\r\n        const query = {\r\n            q: addressQuery,\r\n            format: 'jsonv2',\r\n            limit: 1,\r\n            addressdetails: 1,\r\n            countrycodes: 'us',\r\n        };\r\n\r\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?${querystring.encode(query)}`);\r\n\r\n        if (!response.ok) {\r\n            return { success: false, error: `Nominatim failed with status: ${response.status}` };\r\n        }\r\n\r\n        const data = (await response.json()) as NominatimResult[];\r\n\r\n        if (!data || !data.length || data.length !== 1) {\r\n            return { success: false, error: `Nominatim returned invalid result: ${data}` };\r\n        }\r\n\r\n        const coordinate = {\r\n            id: listingId,\r\n            latitude: parseFloat(data[0].lat),\r\n            longitude: parseFloat(data[0].lon),\r\n        } as ListingCoordinates;\r\n        const coordinateJson = JSON.stringify(coordinate);\r\n\r\n        localStorage.setItem(listingId.toString(), coordinateJson);\r\n        localStorage.setItem(addressQuery.toLocaleUpperCase(), coordinateJson);\r\n\r\n        return { success: true, data: coordinate };\r\n    } catch (err) {\r\n        return { success: false, error: err.toString() };\r\n    }\r\n};\r\n","interface QueueEntry {\r\n    resolve: () => void;\r\n    reject: (reason: string | Error) => void;\r\n}\r\n\r\nexport class DelayQueue {\r\n    private readonly _delay: number;\r\n    private readonly _queue: QueueEntry[];\r\n\r\n    private _isTicking: boolean;\r\n\r\n    constructor(delay: number) {\r\n        this._delay = delay;\r\n        this._queue = [];\r\n        this._isTicking = false;\r\n    }\r\n\r\n    public waitNext(): Promise<void> {\r\n        const promise = new Promise<void>((resolve, reject) => this._queue.push({ resolve, reject }));\r\n        if (!this._isTicking) {\r\n            this.startTick();\r\n        }\r\n\r\n        return promise;\r\n    }\r\n\r\n    private startTick(force = false): void {\r\n        if (this._isTicking && !force) {\r\n            return;\r\n        }\r\n\r\n        this._isTicking = true;\r\n        setTimeout(this.pop.bind(this), this._delay);\r\n    }\r\n\r\n    private pop(): void {\r\n        const nextItem = this._queue.shift();\r\n        if (!nextItem) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            nextItem.resolve();\r\n        } catch (err) {\r\n            // The handler might throw an error, and if so, send it to the reject\r\n            console.log(`DelayQueue callback threw error that was ignored: ${err}`);\r\n        }\r\n\r\n        if (!this._queue.length) {\r\n            this._isTicking = false;\r\n        } else {\r\n            this.startTick(true);\r\n        }\r\n    }\r\n}\r\n","import React, { FC } from 'react';\r\nimport { Popup } from './general/popup';\r\nimport { scrapeSourceForListings } from '../api/mlspin';\r\nimport { ErrorContext } from '../context/errorContext';\r\nimport { ListingContext } from '../context/listingContext';\r\nimport { Listing } from '../schemas/listing';\r\nimport { ListingCoordinates } from '../schemas/listingCoordinates';\r\nimport { lookupGeocodeAddress } from '../api/osmNominatim';\r\nimport { makeStyles, TextField } from '@material-ui/core';\r\n\r\ninterface SourceInputPopupProps {\r\n    isOpen: boolean;\r\n    setIsImporting: (isImporting: boolean) => void;\r\n    setListings: (listings: Listing[] | null) => void;\r\n    setCoordinates: (coordinates: ListingCoordinates[] | null) => void;\r\n    close: () => void;\r\n}\r\n\r\nexport const useStyles = makeStyles(() => ({\r\n    sourceInput: {\r\n        width: '80vw',\r\n    },\r\n}));\r\n\r\nexport const SourceInputPopup: FC<SourceInputPopupProps> = ({\r\n    isOpen,\r\n    setIsImporting,\r\n    setListings,\r\n    setCoordinates,\r\n    close,\r\n}: SourceInputPopupProps) => {\r\n    const [sourceString, setSourceString] = React.useState<string | undefined>();\r\n    const errorContext = React.useContext(ErrorContext);\r\n    const listingContext = React.useContext(ListingContext);\r\n\r\n    const classes = useStyles();\r\n\r\n    const parseAndSaveListings = async () => {\r\n        if (!sourceString) {\r\n            errorContext.addError('Please enter source information.');\r\n            return;\r\n        }\r\n\r\n        setIsImporting(true);\r\n\r\n        const parseResult = await scrapeSourceForListings(sourceString);\r\n        if (!parseResult.success || !parseResult.data?.length) {\r\n            errorContext.addError(`Tell Jeff the parse isn't working: ${parseResult.error?.toString()}`);\r\n            return;\r\n        }\r\n\r\n        let newListings = parseResult.data;\r\n        // The listings often have duplicates, so filter out those\r\n        const ids = new Set<number>(listingContext.listings?.map((l) => l.id));\r\n        newListings = newListings.filter((l) => {\r\n            if (ids.has(l.id)) {\r\n                return false;\r\n            } else {\r\n                ids.add(l.id);\r\n                return true;\r\n            }\r\n        });\r\n\r\n        close();\r\n        setListings([...(listingContext.listings ?? []), ...newListings]);\r\n\r\n        const coordinates = listingContext.coordinates ?? [];\r\n        for (const listing of newListings) {\r\n            const coordinatesResult = await lookupGeocodeAddress(\r\n                listing.id,\r\n                `${listing.address.street}, ${listing.address.city}, ${listing.address.state}`\r\n            );\r\n\r\n            if (!coordinatesResult.success || !coordinatesResult.data) {\r\n                console.log(`Failed to get coordinates for ${listing.address.street}: ${coordinatesResult.error}`);\r\n                continue;\r\n            }\r\n\r\n            coordinates.push(coordinatesResult.data);\r\n            setCoordinates([...coordinates]);\r\n        }\r\n\r\n        setIsImporting(false);\r\n    };\r\n\r\n    return (\r\n        <Popup\r\n            title=\"Input MLS Page\"\r\n            isOpen={isOpen}\r\n            onConfirm={parseAndSaveListings}\r\n            confirmButtonLabel=\"Import\"\r\n            onCancel={close}\r\n        >\r\n            <TextField\r\n                className={classes.sourceInput}\r\n                multiline\r\n                fullWidth\r\n                rows={10}\r\n                rowsMax={30}\r\n                placeholder=\"Paste page source here...\"\r\n                variant=\"outlined\"\r\n                onChange={(s) => setSourceString(s.currentTarget.value)}\r\n            />\r\n        </Popup>\r\n    );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { Popup } from './general/popup';\r\nimport { ListingContext } from '../context/listingContext';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\ninterface ListingPopupProps {\r\n    isOpen: boolean;\r\n    close: () => void;\r\n}\r\n\r\nexport const useStyles = makeStyles(() => ({\r\n    listingView: {\r\n        width: '80vw',\r\n        height: '80vh',\r\n    },\r\n}));\r\n\r\nexport const ListingPopup: FC<ListingPopupProps> = ({ isOpen, close }: ListingPopupProps) => {\r\n    const listingContext = React.useContext(ListingContext);\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Popup\r\n            title={\r\n                listingContext.listings?.find((l) => l.id === listingContext.selectedListingId)?.address.street ??\r\n                'Invalid Listing Selected'\r\n            }\r\n            isOpen={isOpen && !!listingContext.listings?.length}\r\n            hideCancelButton\r\n            onConfirm={close}\r\n            confirmButtonLabel=\"Close\"\r\n        >\r\n            {listingContext.selectedListingId && (\r\n                <iframe\r\n                    className={classes.listingView}\r\n                    title={listingContext.selectedListingId.toString()}\r\n                    src={`https://vow.mlspin.com/VOW/listingviews/GetListing?rm=1&vf=2&summ=false&o=2&od=1&f=0&ps=0&offs=0&sel=${listingContext.selectedListingId}&sp=false&cb=16190256`}\r\n                />\r\n            )}\r\n        </Popup>\r\n    );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { ListingContext } from '../context/listingContext';\r\nimport { Button, Grid, makeStyles, Typography } from '@material-ui/core';\r\nimport { MapContainer, Marker, Popup, TileLayer } from 'react-leaflet';\r\nimport { openListing } from '../api/mlspin';\r\n// import { ErrorContext } from '../context/errorContext';\r\n\r\ninterface MapProps {\r\n    setSelectedListingId: (listingId: number | null) => void;\r\n    showListing: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    map: {\r\n        width: '100%',\r\n        height: '50vh',\r\n        margin: '1rem 0',\r\n    },\r\n    listingType: {\r\n        textTransform: 'capitalize',\r\n    },\r\n});\r\n\r\nexport const Map: FC<MapProps> = ({ setSelectedListingId, showListing }: MapProps) => {\r\n    const listingContext = React.useContext(ListingContext);\r\n    // const errorContext = React.useContext(ErrorContext);\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid item>\r\n            <MapContainer center={[42.41, -71.15]} zoom={11.6} scrollWheelZoom className={classes.map}>\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                {listingContext.coordinates?.reduce((markers, coordinates) => {\r\n                    const listing = listingContext.listings?.find((l) => l.id === coordinates.id);\r\n                    if (!listing) {\r\n                        return markers;\r\n                    }\r\n\r\n                    markers.push(\r\n                        <Marker\r\n                            key={coordinates.id}\r\n                            position={[coordinates.latitude, coordinates.longitude]}\r\n                            eventHandlers={{\r\n                                click: (_) => setSelectedListingId(coordinates.id),\r\n                            }}\r\n                        >\r\n                            <Popup>\r\n                                <Grid container direction=\"column\" alignItems=\"center\">\r\n                                    <Grid item>\r\n                                        <Typography component=\"b\">{listing.address.street}</Typography>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Typography component=\"b\">\r\n                                            {listing.address.unit ? `Unit: ${listing.address.unit}` : ''}\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Typography component=\"b\" className={classes.listingType}>\r\n                                            {listing.type}\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => openListing(coordinates.id)}\r\n                                    >\r\n                                        Open Listing\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Popup>\r\n                        </Marker>\r\n                    );\r\n                    return markers;\r\n                }, [] as React.ReactNode[])}\r\n            </MapContainer>\r\n        </Grid>\r\n    );\r\n};\r\n","import { Button, Grid, makeStyles } from '@material-ui/core';\r\nimport React, { FC } from 'react';\r\nimport { ErrorContext } from '../context/errorContext';\r\nimport { ListingContext } from '../context/listingContext';\r\nimport { Listing } from '../schemas/listing';\r\nimport { ListingTable } from './listingTable';\r\nimport { SourceInputPopup } from './sourceInputPopup';\r\nimport { ListingPopup } from './listingPopup';\r\nimport { Map } from './map';\r\nimport { ListingCoordinates } from '../schemas/listingCoordinates';\r\n\r\nconst useStyles = makeStyles({\r\n    mainContainer: {\r\n        margin: '0 5rem',\r\n        width: 'auto',\r\n    },\r\n    buttonContainer: {\r\n        margin: '1rem 0',\r\n    },\r\n});\r\n\r\nexport const Main: FC = () => {\r\n    const [isImporting, setIsImporting] = React.useState<boolean>(false);\r\n    const [isListingVisible, setIsListingVisible] = React.useState<boolean>(false);\r\n    const [selectedListingId, setSelectedListingId] = React.useState<number | null>(null);\r\n    const [listings, setListings] = React.useState<Listing[] | null>(null);\r\n    const [coordinates, setCoordinates] = React.useState<ListingCoordinates[] | null>(null);\r\n    const [errors, setErrors] = React.useState<string[] | null>(null);\r\n    const [isSourceInputOpen, setIsSourceInputOpen] = React.useState<boolean>(true);\r\n\r\n    const addError = (error: string) => {\r\n        setErrors([...(errors ?? []), error]);\r\n    };\r\n\r\n    const clearErrors = () => setErrors(null);\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <ListingContext.Provider value={{ isImporting, selectedListingId, listings, coordinates }}>\r\n            <ErrorContext.Provider value={{ errors, addError, clearAll: clearErrors }}>\r\n                <Grid container direction=\"column\" className={classes.mainContainer}>\r\n                    <Grid\r\n                        container\r\n                        item\r\n                        direction=\"row\"\r\n                        justify=\"space-evenly\"\r\n                        alignItems=\"center\"\r\n                        className={classes.buttonContainer}\r\n                    >\r\n                        <Button variant=\"contained\" onClick={() => setIsSourceInputOpen(true)}>\r\n                            Import\r\n                        </Button>\r\n                    </Grid>\r\n                    <SourceInputPopup\r\n                        isOpen={isSourceInputOpen}\r\n                        setIsImporting={setIsImporting}\r\n                        setListings={setListings}\r\n                        setCoordinates={setCoordinates}\r\n                        close={() => setIsSourceInputOpen(false)}\r\n                    />\r\n                    <Map setSelectedListingId={setSelectedListingId} showListing={() => setIsListingVisible(true)} />\r\n                    <ListingTable setSelectedListingId={setSelectedListingId} />\r\n                    <ListingPopup isOpen={isListingVisible} close={() => setIsListingVisible(false)} />\r\n                </Grid>\r\n            </ErrorContext.Provider>\r\n        </ListingContext.Provider>\r\n    );\r\n};\r\n","import { Theme, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport const DefaultTheme: Theme = createMuiTheme({\r\n    palette: {\r\n        type: 'dark',\r\n    },\r\n    shape: {\r\n        borderRadius: 1,\r\n    },\r\n    overrides: {\r\n        MuiCssBaseline: {\r\n            '@global': {\r\n                body: {\r\n                    margin: 0,\r\n                    fontFamily: [\r\n                        '-apple-system',\r\n                        'BlinkMacSystemFont',\r\n                        'Segoe UI',\r\n                        'Roboto',\r\n                        'Oxygen',\r\n                        'Ubuntu',\r\n                        'Cantarell',\r\n                        'Fira Sans',\r\n                        'Droid Sans',\r\n                        'Helvetica Neue',\r\n                        'sans-serif',\r\n                    ].join('.'),\r\n                    height: '100%',\r\n                },\r\n                html: {\r\n                    height: '100%',\r\n                },\r\n            },\r\n        },\r\n    },\r\n});\r\n","import { CssBaseline, ThemeProvider } from '@material-ui/core';\r\nimport React, { FC } from 'react';\r\nimport { ErrorHandler } from './components/general/errorHandler';\r\nimport { Main } from './components/main';\r\nimport { DefaultTheme } from './styles/theme';\r\n\r\nexport const App: FC = () => {\r\n    return (\r\n        // Highest level applies the default Material UI theme to everything\r\n        <ThemeProvider theme={DefaultTheme}>\r\n            {/* MUI helper to standardize the CSS for the application */}\r\n            <CssBaseline />\r\n            <ErrorHandler>\r\n                <Main />\r\n            </ErrorHandler>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}